;VCS CHECKERS BY CAROL SHAW 5/15/80 9:41 AM

	;	TITLE "VCS CHECKERS BY CAROL SHAW 15/15/80 9:41 AM" (final?)
	;
0000 	PAL	=	0	;0 => NTSC, 1=> PAL VERSION
0000 	PRNT	=	0	;0 => ROM,  1=> DEBUG VERSION WHICH PRINTS ON TI TERMINAL
0000 	STACK	=	0	;0 => NORMAL ALPHA-BETA "STACK", 1 => EXTRA LARGE STACK
F000 	ROMSTR	=	$F000	;ROM START ADDR
	;
	;	DK1 SCHKG SRC
	;	COPYRTGHT ATARI, 1980
	;	STARTED 10/1/79
	;
	;	THE ALPHA-BETA PRUNING ALGORITHM USED HEREIN IS BASED ON THE LISP
	;	PROGRAM ON PAGE 321 OF "ARTIFICIAL INTELLIGENCE" BY PATRICK HENRY
	;	WINSTON, 1977, ADDISON-WESLEY PUBLISHING COMPANY, INC. PHILIPPINES.
	;	ALSO ON "SOME STUDIES IN MACHINE LEARNING USING THE GAME OF CHECKERS",
	;	BY A. L. SAMUEL, PARTS I AND II, IN THE IBM JOURNAL OF RESEARCH AND DEVELOPMENT,
	;	JULY 1959 AND NOVEMBER 1967. PART I IS ALSO IN "COMPUTERS AND THOUGHT",
	;	BY EDWARD A. FEIGENBAUM AND JULIAN FELDMAN, PP. 71-105, 1963, MCGRAW-HILL.
	;
	;
	;	STELLA” [TIA] REGISTER ADDRESSES
	;
0000	VSYNC	=	$00	;BIT        1  VERTICAL SYNC SET-CLR    1=>START
0001	VBLANK	=	$01	;BIT  76    1  VERTICAL BLANK SET-CLR  PORT CONTROL  INPUT0-INPT5
0002	WSYNC 	=	$02	;STROBE        WAIT FOR HORIZ BLANK
0003	RSYNC 	=	$03	;STROBE        RESET HORIZ SYNC COUNTER
0004	NUSlZ0	=	$04 	;BITS   54 210 NUMBER-SIZE PLAYER/MISSILE 0
0005	NUSIZ1	=	$05 	;BITS   54 210 NUMBER-SIZE PLAYER/MISSILE 1
0006	COLUP0	=	$06	;BITS 7654321  COLOR(4)-LIM(3) PLAYER 0
0007	COLUP1	=	$07	;BITS 7654321  COLOR(4)-LIM(3) PLAYER 1
0008	CQLUPF	=	$08	;BITS 7654321  COLOR(4)-LIM(3) PLAYFIELD
0009	COLUBK	=	$09 	;BITS 7654321  COLOR(4)-LIM(3) BACKGROUND
000A	CTRLPF	=	$0A 	;BITS   54 210 PLAYFIELD CONTROL & BALL
000B	REFP0	=	$0B 	;BIT      3    REFLECT PLAYER 0  1=>REFLECT
000C	REFP1	=	$0C	;BIT      3    REFLECT PLAYER 1
000D	PF0	=	$0D	;BITS 7654     PLAYFIELD REG BYTE 0 (REVERSED)
000E	PF1	=	$0E	;BITS ALL      PLAYFIELD REG BYTE 1 (REVERSED)
000F	PF2	=	$0F	;BITS ALL      PLAYFIELD REG BYTE 2 (REVERSED)
0010	RESP0	=	$10	;STROBE        RESET PLAYER 0
0011	RESP1	=	$11	;STROBE        RESET PLAYER 1
0012	RESM0	=	$12	;STROBE        RESET MISSILE 0
0013	RESM1	=	$13	;STROBE        RESET MISSILE 1
0014	RESBL	=	$14	;STROBE        RESET BALL
0015	AUDC0	=	$15	;BITS     3210 AUDIO CONTROL 0
0016	AUDC1	=	$16	;BITS     3210 AUDIO CONTROL 1
0017	AUDF0	=	$17	;BITS     3210 AUDIO FREQUENCY 0
0018	AUDF1	=	$18	;BITS     3210 AUDIO FREQUENCY 1
0019	AUDV0	=	$19	;BITS     3210 AUDIO VOLUME 0
001A	AUDV1	=	$1A	;BITS     3210 AUDIO VOLUME 1
001B	GRP0	=	$1B	;BITS ALL      GRAPHICS FOR PLAYER 0
001C	GRP1	=	$1C	;BITS ALL      GRAPHICS FOR PLAYER 1
001D	ENAM0	=	$1D	;BIT        1ENABLE MISSILE 0   1=> ENABLE
001E    ENAM1   =       $1E	;BIT        1  ENABLE MISSILE 1
001F    ENABL	=	$1F	;BIT        1  ENABLE BALL
0020	HMP0	=	$20	;BITS 7654     HORIZ MOTION PLAYER 0   0-7 -> LEFT
0021	HMP1	=	$21	;BITS 7654     HORIZ MOTION PLAYER 1   F-8 => RIGHT
0022	HMM0	=	$22	;BITS 7654     HORIZ MOTION MISSILE 0
0023	HMM1	=	$23	;BITS 7654     HORIZ MOTION MISSILE 1
0024	HMBL	=	$24	;BITS 7654     HORIZ MOTION BALL
0025	VDELP0	=	$25	;BIT         0 VERTICAL DELAY PLAYER 0   1=> VDEL ON
0026	VDELPl	=	$26	;BIT         0 VERTICAL DELAY PLAYER 1
0027	VDELBL	=	$27	;BIT         0 VERTICAL DELAY BALL
0028	RESMP0	=	$28	;BIT        1  RESET MISSILE TO PLAYER 0   1=> MISSILE RESET TO PLAYER
0029	RESMPl	=	$29	;BIT        1  RESET MISSILE TO PLAYER 1
002A	HMOVE	=	$2A	;STROBE        ACT ON HORIZ MOTION
002B	HMCLR	=	$2B	;STROBE        CLEAR ALL HM REGISTERS
0020	CXCLR	=	$2C	;STROBE        CLEAR COLLISION LATCHES
	;
	;	READ ADDRESSES - BITS 7 & 6 ONLY
	;
0030	CXM0P	=	$30	;M0*P1  M0*P0
0031	CXM1P	=	$31	;M1*P0  M1*P1
0032	CXP0FB	=	$32	;P0*PF  P0*BL
0033	CXP1FB	=	$33	;P1*PF  P1*BL
0034	CXM0FB	=	$34	;M0*PF  M0*BL
0035	CXM1FB	=	$35	;M1*PF  M1*BL
0036	CXBLPF	=	$36	;BL*PF
0037	CXPPMM	=	$37	;P0*P1  M0*M1
0038	INPT0	=	$38	;POT 0   BlT7=l => POT CAPACITOR IS COMPLETELY CHARGED?
0039	INPT1	=	$39	;POT 1
003A	INPT2	=	$3A	;POT 2
003B	INPT3	=	$3B	;POT 3
003C	INPT4	=	$3C	;JOYSTICK 0 BUTTON   B7=0 => BUTTON PRESSED
003D	INPT5	=	$3D	;JOYSTICK 1 BUTTON
	;
	; PIA AND TIMER (6532) LOCATIONS
	;
0280	SWCHA	=	$280	;P0/Pl JOYSTICKS (RLDU/RLDV), POT TRIGGERS, KEYBOARD, DRIVING CONTROLLER
0281	CTLSWA	=	$281	;SWCHA I/O CONTROL      1=0UTPUT
0282	SWCHB	=	$282	;CONSOLE SWITCHES (READ ONLY) P1B,P0B,X,X,B/W, X,SELECT,RESET IF 0
0283	CTLSWE	=	$283	;UNUSED
0284	INTIM	=	$284	;INTERVAL TIMER INPUT   0=>TIMER UP
0294	TIM1T	=	$294	;TIMER OUTPUT   1 MACHINE CYCLE/TICK (.838 MICROSEC)
0295	TIM8T	=	$295	;8 MACHINE CYCLES/TICK
0296	TIM64T	=	$296	;64 MC'S/TICK
0297	T1024T	=	$297	;1024 MACHINE CYCLES/TICK (858. 2 MICROSECONDS)
	;
	; KIM SUBROUTINES
	;
1E2F	CRLF	=	$1E2F	;PRINT CRLF ON TI
1E3B	PRTBYT	=	$1E3B	;PRINT ACCUMULATOR IN HEX ASCII ON TI
1E5A	GETCH	=	$1E5A	;READ ASCII CHAR FROM TI INTO A
1E9E	OUTSP	=	S1E9E	;PRINT SPACE ON TI
1EAO	OUTCH	=	$1EA0	;PRINT ACCUMULATOR AS ASCII CHAR ON TI
1F9D	GETBYT	=	$1F9D	;READ TWO HEX ASCII CHARS FROM TI INTO A
		;		CHECKERS EQUATES
000B		MAXMAX	=	11		;MAX STACK DEPTH FOR ALPHA-BETA
			.IF STACK
		MAXMAX	=	22
			.ENDIF

0009		JMPLEN	=	9		; LENGTH OF JMPTBL (LIST OF JUMPED PIECES!

0010		LINCHR	=	15		;# OF LINES/CHAR
0000		EMPTY	=	0		;EMPTY SQUARE INDEX INTO CHARACTER TABLE
0010		CHECKER	=	1*LINCHR
0020		KING	=	2*LINCHR
0030		CURS	=	3*LINCHR

00AA		BLANK	=	10*16+10	;TWO BLANK CHARS
00BB		JP	=	11*16+11	;"JP"

0000		CLFO	=	0		;PLAYER O (HUMAN, LEFT JOYSTICK)
0030		CLP1	=	$80		;PLAYER 1 (COMPUTER, RIGHT PLAYER)

0010		HUMCHK	=	CLPO+CHECKER	;HUMAN CHECKER (NOT KING)
0020		HUMKNG	=	CLPO+KING	;HUMAN KING
0030		HUMCRS	=	CLPO+CURS	;HUMAN CURSOR
0090		CMFCHK	=	CLP1+CHECKER	;COMPUTER CHECKER
00A0		CMPKNG	=	CLP1+KING	;COMPUTER KING
00B0		CMPCRS	=	CLP1+CURS	;COMPUTER CURSOR

0005		HMIN	=	5		; MIN. GAMIMG FOR HARD BOARD COLORS

0036		DARK	=	$36		;DARK CHECKER COLOR/LUM
000C		LIGHT	=	$0C		;LIGHT CHECKER COLOR/LUM
0000		EDARK	=	0		;EASY DARK SQUARE COLOR. 0 IS ACTUALLY USED INSTEAD OF EDARK
0034		ELIGHT	=	$34		;EASY LIGHT SQUARE COLOR (RED)
0036		ELIAT	=	$36		;EASY LIGHT IF ATTRACT
00B0		HDARK	=	$B0		;HARD DARK SQUARE COLOR (GREEN)
0026		HLIGHT	=	$26		;HARD LIGHT SQUARE COLOR (BUFF OR CREAM OR WHITE)
0026		HLIAT	=	$26		;HARD LIGHT SQUARE IF ATTRACT
000C		LTCHR	=	$0C		;LIGHT CHAR COLOR
0092		DRKCHR	=	$92		;DARK CHARACTER COLOR
002D		GSCON	=	45		;GAME SELECT TIMER INITIAL VALUE
0025		OVRCON	=	$25		;OVERSCAN TIMER INITIAL VALUE
002C		VBLCON	=	44		;VBLANK TIMER INITIAL VALUE
001E		VBTIM	=	30		;1/2 SEC. VBLANK AFTER CALCULATION — CHANGE FOR PAL
002D		FRZTIM	=	45		;FREEZE TIMER FOR END OF HUMAN MOVE

		;
		;	PAL VERSIONS OF THE ABOVE
		;
			.IF	PAL
		DARK	=	$66		;DARK CHECKER COLOR/LUM
		LIGHT	=	$0C		;LIGHT CHECKER COLOR/LUM
		EDARK	=	0		;EASY DARK SQUARE COLOR
		ELIGHT	=	$64		;EASY LIGHT SQUARE COLOR (RED)
		ELIAT	=	$66		;EASY LIGHT IF ATTRACT
		HDARK	=	$50		;HARD DARK SQUARE COLOR (GREEN)
		HLIGHT	=	$46		;HARD LIGHT SQUARE COLOR (BUFF OR CREAM OR WHITE)
		HLIAT	=	$46 		;HARD LIGHT SQUARE IF ATTRACT
		LTCHR	=	$0C		;LIGHT CHAR COLOR
		DRKCHR	=	$B2		;DARK CHARACTER COLOR
		GSCON	=	38		;GAME SELECT TIMER INITIAL VALUE
		OVRCON	=	$2B		;OVERSCAN TIMER INITIAL VALUE
		VBLCON	=	$36		;VBLANK TIMER INITIAL VALUE
		VBTIM	=	$32		;1/2 SEC. VBLANK AFTER CALCULATION — CHANGE FOR PAL
		FRZTIM	=	38		;FREEZE TIMER FOR END OF HUMAN MOVE
			.ENDIF


FFFB		RB	=	-5		;SQUARE # OFFSET FOR RIGHT BACKWARD (DOWN) MOVEMENT
FFFC		LB	=	-4		;                    LEFT EACKWARD
0004		RF	=	4		;                    RIGHT FORWARD
0005		LF	=	5		;                    LEFT FORWARD

0010		PLAY2	=	$10		;TWO-PLAYER GAME # IN DECIMAL

0036		DROP	=	$36		;PIECE DROPPING SOUND FOR AUDV0
0030		PICKUP	=	$30		;PIECE PICKUP SOUND FOR AUDV0
0004		PURE2	=	4		;PURE TONE/4 FOR AUDC0
000F		ERRSND	=	15		;ERROR SOUND FOR AUDC0

0008		MLT	=	$08		;MULTIPLE JUMP MASK
0004		MST	=	$04		;MUST JUMP MASK

0004		CORN	=	4		;DOUBLE CORNER CREDIT

0008		ENDPC	=	4*2		;MIN NUMBER OF HUMAN PIECES FOR NON-END GAME

0020		ADDTRM	=	$20		;TERM TO ADD TO MAGNITUDE OF SCORE IF STACK IS FULL IN TERMNODE
			;			VARIABLES (RAM PAGE ZERO)
				*=$80
			;
			;			THE FOLLOWING RAM LOCS ARE CLEARED DURING RESET:
			;A-B MEANS USED BY ALPHA-BETA PRUNING ROUTINE
			;SAVE MEANS ALPHA-BETA PRUNING ROUTINE DOES NOT ALTER
0080			ZROBGN
0080			BOARD
				*=*+35		;CHECKER BOARD (1 BYTE / SQUARE) SQUARES 8,17,26 ARE NOT USED. A-B
00A3			PIECE
				*=*+1		;CURRENT PIECE BEING MOVED. A-B

00A4			JMPI
				*=*+1		;INDEX INTO JMPLST — <0 => NO JUMPS. A-B
00A5			MSTJMP
				*=*+1		;0 => ACTIVE PLAYER CAN'T JUMP 4 => ACTIVE PLAYER MUST JUMP.  A-B
00A6			MLTJMP
				*=*+1		;8 => CONTINUING MULTIPLE JUMP. A-B & MAIN
00A7			MSTFLG
				*=*+1		;MSTJMP SAVED WHILE NEW MSTJMP IS COMPUTED. A-B
00A8			MLTFLG
				*=*+1		;MLTJMP BACKUP. A-B

00A9			HPIECE
				*=*+1		;HUMAN PIECE COUNT. KING=3, CHECKER=2. A-B
00AA			CPIECE
				*=*+1		;COMPUTER PIECE COUNT. A-B

00AB			CURSOR
				*=*+1		; SQUARE # FOR BLINKING CURSOR. SAVE
00AC			FROMB
				*=*+1		;BINARY "FROM" SQUARE (INTERNAL NUMBERING). A-B
00AD			TOSQRB
				*=*+1		;BINARY "TO" SQUARE.  A-B

00AE			HKING
				*=*+1		;HUMAN KING COUNT
00AF			CKING
				*=*+1		;COMPUTER KING COUNT (1 FOR EACH KING)

00B0			ZROEND
			;
			;			THE FOLLOWING RAM LOCS ARE NOT CLEARED DURING RESET:
			;
			; GAMNO = 1 TO GMAX2 IN DECIMAL
			;	1-9		REGULAR CHECKERS
			;	10		2-PLAYER (EITHER)
			;	11- 19		GIVE-AWAY (LOSING)

00B0			GAMNO
				*=*+1		;GAME NUMBER
00B1			COLHUM
				*=*+1		;HUMAN CHECKER COLOR (NO ATTRACT ADDED IN). SAVE
00B2			COLCMP
				*=*+1		;COMPUTER CHECKER COLOR (NO ATTRACT ADDED IN). SAVE?
			;
00B3			T0
				*=*+1		;TEMP (USED IN  KERNEL, ETC.). A-B & MAIN

00B4			T1
				*=*+1		;TEMP (USED IN KERNEL, ETC.). A-B & MAIN
00B4			XSAVE	=	T1	;X REG SAVED FOR JMPCHK SUBROUTINE. A-B & MAIN
00B5			T2
				*=*+1		;A-B & MAIN
00B5			YSAVE	=	T2	;. A-B & MAIN
00B5			NUM	=	T2	;2 BYTE NUMERATOR FOR STATIC EVALUATION DIVIDE (USED FOR RATIO OF PIECE COUNTS). A—B
00B6			T3
				*=*+1		;A-B & MAIN
00B6			ANYMVE	=	T3	;>0 => ACTIVE PLAYER CAN MOVE. A-B & MAIN -- USED ONLY BY JMPCHK
00B7			T6
				*=*+1		;ANOTHER TEMP
00B8			DEN
				*=*+1		;DENOMINATOR. A-B
00B9			T7
				*=*+1		;TEMP
00BA			T8
				*=*+1		;YET ANOTHER TEMP — USED TO SAVE BK COLOR

00BB			ACTIVE
				*=*+1		;ACTIVE OR CURRENT PLAYER (HUMAN=0, COMPUTER=$8O>. A-B & MAIN
00BC			DEPTH
				*=*+1		;CURRENT DEPTH OF TREE SEARCH. A-B & SET UP BY MAIN

00BD			JMPSQR
				*=*+1		;SQUARE # FOR PIECE BEING JUMPED. A-B
00BE			INDEX 
				*=*+1		;CURRENT OFFSET INDEX (0-3). A-B
00BF			FRSMOV
				*=*+1		;$80 => FIRST MOVE (MAY BE MULTIPLE JUMP). A-B
			;	B7=l => FIRST MOVE. B6=l => FIRST MOVE AT THIS LEVEL, BETTER MOVE FOUND
00C0			XMOVE
				*=*+1		;"FROM" MOVE SQUARE FROM MOVCHK. A-B & MAIN
00C1			TIMOOT
				*=*+1		;TIMER

00C2			OLDPBQ
				*=*+1		;SWCHB FOR THIS FRAME.
00C3			FRAME
				*=*+1		;FRAME COUNTER -- COUNTS UP
00C4			PRNCNT
				*=*+1		;B7=l => PRUNE (FOR MULTIPLE JUMPS). B6-B0 = RANDOM MOVE COUNTER
00C5			JMPLST
				*=*+JMPLEN	;SQUARES FOR PIECES JUMPED BY COMPUTER, <O => KING. A-B & MAIN
00CE			JMPEND
			;
			;	THE FOLLOWING ALPHA-BETA "STACK" OVERLAP THE MAIN PROGRAM VARS WHICH
			;	ARE LISTED LAST.  THEY ALSO OVERLAP JMPLST WITH THE EXCEPTION OF THE FIRST 3 BYTES.
			;
				*=JMPLST+3
				.IF	STACK
			AX=*
				*•=$180
				. ENDIF'	;ALLOW FOR BIGGER STACK IF DEBUG
00CB			FROMT
				*=*+MAXMAX	;FROM(I-1) = FROM SQUARE FOR DEPTH I. A-B
			;	B7=l => FIRST MOVE, B6=l => FIRST MOVE AT THIS LEVEL, BETTER MOVE FOUND
00D3			OTHER
				*=*+MAXMAX	;OTHER(1-1) = OTHER FOR DEPTH I. A-B
			; B7-6 = CAPTURED PIECE, B5-4 = MOVED PIECE, B3 = MLTJMP, B2 = MSTJMP, Bl-0 = OFFSET INDEX
00DE			ALPHAL
				*=*+MAXMAX+l+l	;ALPHAL(I) = ALPHA<DEPTH) LSB. A-B

00EB			ALPHAH
				*=*+MAXMAX+l+l	;ALPHAH(I) = ALPHA(DEPTH)/256. A-B
00F8			ALPEND
				.IF	STACK
				*=AX
				.ENDIF

			;
			;			THE FOLLOWING VARS OVERLAP THE ALPHA-BETA "STACK" AND T4—SCRRPF:
			;
				*=JMPLST+JMPLEN

00CE			COLP0
				*=*+1		;COLOR OF P0 (ATTRACT ADDED IN)
00CF			COLP1
				*=*+1		;COLOR OF P1

00D0			COL0
				*=*+2		;COLOR OF 1ST PIECE IN ROW (FOR KERNEL ONLY)
00D2			COL1
				*=*+2
00D4			COL2
				*=*+2
00D6			COL3
				*=*+2

00D8			PNTR0
				*=*+2		;POINTERS TO SQUARE GRAPHICS
00DA			PNTR1
				*=*+2
00DC			PNTR2
				*=*+2
00DE			PNTR3
				*=*+2

00E0			SQUARE
				*=*+1		;SQUARE # FOR USE IN KERNEL
00E1			SQREND
			;
			;	THE FOLLOWING PARTIALLY OVERLAP BOTH THE ALPHA-BETA "STACK" AND
			;	COLP0-SQUARE.
			;
				*=JMPLST+JMPLEN
00CE			T4
				*=*+1
00CF			T5
				*=*+1

00D0			SCRLPO
				*=*+5		;P0 “SCORE" GRAPHICS
00D5			SCRRP1
				*=*+5		;P1
00DA			SCRLPF
				*=*+5		;LEFT PF1 GRAPHICS
00DF			SCRRPF
				*=*+5		;RIGHT PF1 GRAPHICS

00E4			MOVVAL
				*=*+1		;VALUE IN MOVE SQUARE. SET UP AT END OF A-B. DON'T SAVE
00E5			MOVFLG
				*=*+1		;1 => DISPLAY COMPUTER'S MOVE. DON'T SAVE
00E6			WINSAV
				*=*+1		;WINNING PLAYER, 0=> NO WIN. DON'T SAVE
00E7			FROMTO
				*=*+1		;O => FROM, 1=> TO. DON'T SAVE

00E8			CURSC
				*=*+1		;COMPUTER CURSOR. SET UP AT END OF A-B. DON'T SAVE
00E9			MOVE
				*=*+1		;CURRENT MOVE. SET UP AT END OF A-B. DON'T SAVE
00EA			OLDINP
				*=*+1		;JOYSTICK BUTTON VALUE FOR CURRENT PLAYER FOR LAST FRAME. DON'T SAVE
00EB			GSTIM
				*=*+1		;GAME SELECT TIMER — COUNTS DOWN TO 0. DON'T SAVE

00EC			OLDPB6
				*=*+1		;OLD SWCHB VALUE, 0=>N0RMAL, <>0=>SETUP (BIT 6 ONLY). DON'T SAVE
00ED			ILEGAL
				*=*+1		;>0 => MAKE ILLEGAL MOVE SOUND. DON'T SAVE
00EE			ATIM
				*=*+1		;ATTRACT MODE TIMER -- COUNTS UP. DON'T SAVE
00EF			GFLG2
				*=*+1		;0=>ATTRACT  <> 0 => NOT ATTRACT. DON'T SAVE
00F0			BLNKTM
				*=*+1		;FRAME COUNTER FOR VBLANK AFTER CALCULATION(DOWN TO 0). DON'T SAVE
00F1			SNDTIM
				*=*+1		;TIMER FOR SOUNDS (COUNTS DOWN TO 0). DON'T SAVE
00F2			FREEZE
				*=*+1		;TIMER FOR FREEZE AFTER HUMAN MOVE (0=END OF FREEZE)
00F3			COLSQ
				*=*+1		;SQUARE COLOR FOR KERNEL

00F4			FROM
				*=*+1		;FROM SQUARE FOR "SCORE" . DON'T SAVE
00F5			TOSQR
				*=*+1		;TO SQUARE FOR "SCORE". DON'T SAVE
00F6			SCP0
				*=*+1		;GAME # FOR "SCORE". SAVE
OOF7			SCP1
				*=*+1		;# OF PLAYERS FOR "SCORE". DON'T SAVE


			;			F8-FF ARE USED FOR STACK (4 LEVELS DEEP FOR NOW)
		;				SCORE KERNEL (TOP LINE OF CHARS)
			*=ROMSTR
			.IF	PRNT
			*=$E000			;RELOCATE IF DEBUG TO MAKE ROOM FOR MORE CODE
			JMP	PSTART
			.ENDIF

F000		JMPBAK
F000 A2 04		LDX	#5-1		; 5 BYTES PER CHARACTER
F002		SCOR2
		;				MACHINE CYCLE COUNTS ARE GIVEN
F002 A0 02		LDY	#2		;50 49 REPEAT EACH BYTE TWICE
F004		SCOR3
F004 85 02		STA	WSYNC		;47 53 46 52_
F006 B5 DA		LDA	SCRLPF,X	;4
F008 85 0E		STA	PF1		;7  GAME # (AT LEFT)
F00A B5 D0		LDA	SCRLP0,X	;11
F00C 85 1B		STA	GRP0		;14 “FROM" SQUARE
F00E B5 D5		LDA	SCRRP1,X	;18
F010 85 1C		STA	GRP1		;21 "TO" SQUARE


F012 A9 00		LDA	#0		;23 MISSILE 0 FOR DA SH BETWEEN “FROM" AND "TO"
F014 E0 02		CPX	#2		;25  X=0 ON LAST TIME THROUGH SO CARRY IS CLEAR
F016 D0 01		BNE	SCOR4		;27 28
F018 8A			TXA			;29 X=2
FO19		SCOR4
F019 85 1D		STA	ENAM0		;32 31

F01B B5 DF		LDA	SCRRPF,X	;36 35
F01D 88			DEY			;38 37
F01E 85 OE		STA	PF1		;41 40 # OF PLAYERS (AT RIGHT)
F020 D0 E2		BNE	SCOR3		;44 43 43 42

F022 CA			DEX			;45 44
F023 10 DD		BPL	SCOR2		;48 47 46  X=$FF  Y=0
		;
		;	THE FOLLOWING CODE IS FOR DEBUGGING ONLY.
		;	IT IS NOT TO BE INCLUDED IN THE FINAL CARTRIDGE.
		;	THESE SUBROUTINES USE THE KIM MONITOR ROUTINES TO PRINT VARIOUS
		;	INFORMATION ON THE TI TERMINAL CONNECTED TO THE DEVELOPMENT SYSTEM
		;
			.IF	PRNT
			*=AD

			*=*-1/256+1*256
		;
		;	PRMOVE -- PRINT FROMB-TOSQRB
		;
		PRMOVE
			LDX	PRFLG		;PRINT FLAG SET?
			BEQ	PRRTN		;N0. DON'T PRINT
			DEC	PRCNT		;PRINT 10 MOVES TO THE LINE
			BPL	PRMV10
			JSR	CRLF
			LDA	#10-1
			STA	PRCNT
		PRVM10
			LDX	FROMB		;YES.
			JSR	IEDSP		;PRINT FROM SQUARE #
			JSR	PRTBYT
		;
		;PRTO — PRINT TO SQUARE
		;
		PRTO
			LDA	PRFLG		;PRINT FLAG SET?
			BEQ	PRRTN		;NO. DON'T PRINT
			LDA	#'-		;YES. PRINT '-'
			JSR	OUTCH
			LDX	TOSGRB		;PRINT TO
			TXA
			BMI	PROT1		;SKIP IF TO = BLANK (AA) OR JP (BB)
			JSR	IEDSP		;CONVERT FROM INTERNAL TO EXTERNAL NUMBERING
		PROT1
			JSR	PRTBYT
			JMP	OUTSP

		PRRTN
			RTS
		;
		;	PRBRD — PRINT ENTIRE BOARD & OTHER INFO
		;
		PRBRD
			LDA	PRFLG		;PRINT FLAG SET?
			BEQ	PRRTN		;NO. DON'T PRINT
			LDA	#0		;YES. TURN OFF SOUND, IF ANY
			STA	AUDV0
			JSR`	CRLF		;YES. PRINT CR

			LDA 	#GAMMSG		;PRINT "GAME NUMBER ="
			JSR	OUTAL3
			LDA	GAMNO
			JSR	PRTBYT
			JSR	CRLF

			LDA	#BLKMSG		;"COMPUTER IS DARK"
			LDX	COLCMP
			CPX	#DARK
			BEQ	AXB
			LDA	#WHMSG		;"COMPUTER IS WHITE"
		AXB
			JSR	OUTMSG		;PRINT MSG WITH CR
			LDX	#B112		;"DARK STARTS ON 1-12" (IF COLOR)
			LDA	OLDPBQ
			AND	#8
			BNE	AXC		;COLOR
			LDX	#W112		;B/W "WHITE STARTS ON 1-12"
		AXC
			TXA
			JSR	OUTMSG		;PRINT MSG WITH CR
			LDA	#TOPLFT		;"TOP LEFT SQUARE IS"

			JSR	OUTMS2		;PRINT MSG WITHOUT CR
			LDX	#34
			JSR	IEDSP		;COMPUTE TOP LEFT SQUARE # IN EXTERNAL FORM
			JSR	PRTBYT

			JSR	CRLF		;PRINT BOARD
			LDX	#34
			JSR	PR2ROW
			JSR	PR2ROW
			JSR	PR2ROW
			JSR	PR2ROW
		PRBD70
			JMP	CRLF

		;
		; 	PR2R0W -- PRINT 2 ROWS AND DECREMENT X
		;
		PR2ROW
			JSR	BL2		;2 BLANK SPACES
			JSR	PRROW
			JSR	PRROW
			DEX
			RTS
		;
		;	BL2 -- PRINT TWO SPACES
		;
		BL2
			TXA
			PHA
			JSR	OUTSP
			JSR	OUTSP
			PLA
			TAX
			RTS
		;
		;	PRROW -- PRINT ONE ROW (4 PIECES) & CR
		;
		PRROW	JSR	PRPIEC
			JSR	BL2
			JSR	PRPIEC
			JSR	BL2
			JSR	PRPIEC
			JSR	BL2
			JSR	PRPIEC
			TXA
			PHA
			JSR	CRLF
			PLA
			TAX
			RTS
		;
		;	PRPIEC -- PRINT ONE PIECE (OR -— IF EMPTY)
		;
		PRPIEC	TXA
			PHA
                        LDA	BOARD,X
			BNE	PRP1O
			LDA	#'-		;EMPTY
			JSR	DUTCH
			LDA	#'-
			JSR	OUTCH
			JMP	PRP40
		PRP10
			PHA			;NOT EMPTY
			LDX	#'
			TAY
			BMI	PRP20		;COMPUTER -- PRINT SPACE
			LDX	#'H		;HUMAN —- PRINT "H”
		PRP20
			TXA
			JSR	OUTCH
			LDX	#;1
			PLA
			AND	#$7F
			CMP	#KING		;CHCEKER = 1
			BNE	PRP30		;KING = 2
			INX
		PRP30
			TXA
			JSR	DUTCH
		PRP40
			PLA
			TAX
			DEX
			RTS
		;
                ;	OUTMS2 -— PRINT STRING AT MESSAG/256*256+A ON TI WITH NO CR
		;
		OUTMS2
			LDY	PRFLG		;PRINT FLAG SET?
			BEQ	PRRTN2		;NO. DON'T PRINT
			TAX
			LDA	T0		;SAVE T0,T0+1
			PHA
			LDA	T0+1
			PHA
			STX	T0		; MESSAGE ADR LSB
			LDA	#MESSAG/256	; MESSAGE ADR MSB
			STA	T0+1
			JSR	OUTM3
			TAX
			PLA			; RESTORE T0,T0+1
			STA	T0+1
			PLA
			STA	T0
			TXA
		PRRTN2
			RTS
		;
		;	OUTMSG -— SAME AS 0UTMS2 EXCEPT DO CR
 		; 
		OUTMSG
			LDY	PRFL0
			BEQ	PRRTN2
			JSR	0UTMS2
			JMP	CRLF
		;
		;	PRMB —- INPUT:   Y=LSB OF ADDR OF MESSAGE TO BE PRINTED
		;	                 X=ADDR OF RAM PAGE ZERO VAR TO BE PRINTED
		;	        OUTPUT:  X RESTORED, A,Y MODIFIED
		;
		PRMB
			TXA
			PHA
			TYA
			JSR	OUTMS2
			PLA
			PHA
			JSR	PRTBYT
			JSR	OUTSP
			PLA
			TAX
			RTS
		;
		;	BLECCH -- CALL OUTALP, THEN PRALL
		;
		BLECCH
			LDY	DEPTH
			CPY	PRDEP
			BCS	FRRTN2
			JSR	OUTALP
		;
		;	PRALL -- PRINT A BUNCH OF JUNK FOR ALPHA-BETA PRUNING DEBUG
		;
		PRALL
			JSR	FRMOVE
			LDX	DEPTH
			LDY	#QDEPTH
			JSR	PRMB
			LDX	ACTIVE
			LDY	#QACTIVE
			JSR	PRMB
			JSR	OUTSP

			LDX	DEPTH
			LDA	ALPHAH-1,X
			JSR	PRTBYT
			LDX	DEPTH
			LDA	ALPHAL-1,X
			JSR	PRTBYT
			JSR	OUTSP

			LDX	DEPTH
			LDA	ALPHAH,X
			JSR	PRTBYT
			LDX	DEPTH
			LDA	ALPHAL,X
			JSR	PRTBYT
			JSR	OUTSP

			LDX	DEPTH
			LDA	ALPHAH+1,X
			JSR	PRTBYT
			LDX	DEPTH
			LDA	ALPHAL+1,X
			JSR	PRTBYT
			JSR	OUTSP

			JSR	CRLF
			LDA	PRDEP
			CMP	#4
			BCC	PRA20
			LDX	DEPTH
			CPX	#2
			BEQ	PRA10
			CPX	#1
			BNE	PRA20
			JSR	CRLF		;2 SPACES IF LEVEL 1
		PRA10
			JSR	CRLF		;1 SPACE IF LEVEL 2
		PRA20
			RTS
		;
		;	OUTAL3 — OUTPUT MSG A WITHOUT CR
		;
		OUTAL3
			LDY       #MJ/256
			STA       T0
			STY       T0+1
		;
		;	OUTM3 — MESSAGE PRINTING LOOP
		;
		OUTM3
			LDY	#0
			TYA
			PHA
		OUTM10
			LDA	(T0),Y
			BEG	OUTM20		;END OF MESSAGE IS INDICATED BY A 0 BYTE
			JSR	OUTCH
			PLA
			TAY
			INY
			TYA
			PHA
			BNE	OUTM10		;JMP
		OUTM20
			PLA
			RTS
		;
		;	OUTALP — OUTPUT MESSAGE A WITH CR
		;
		OUTALP
			JSR	OUTAL3
			JMP	CRLF
		;
		;	PASK — INPUT MEW PRFLG AND PRDEP FROM TI
		;
		PASK
			LOA	#1
			STA	PRFLG
			JSR	CRLF
			LDA	#PRMSG
			JSR	OUTMS2
			JSR	GETBYT
			PHA
			JSR	CRLF
			LDA	#PRDMSG
			JSR	OUTMS2
			JSR	GETBYT
			STA	PRDEP
			PLA
			STA	PRFLG
			JMP	GRLF
		;
		;	PRMOV2 — SIMILAR TO PRMOVE
		;
		PRMOV2
			LDA	CURSOR
			STA	FROMB
			LDA	PRFLG
			AND	#$FE		;DO CR'S IF PRINTING ALPHA-BETA JUNK
			BEQ	J0Y800
			JSR	CRLF
			JSR	CRLF
			JSR	PRMOVE
			JSR	CRLF
			JSR	CRLF
			LDX	MOVE
			RTS
		JOY800
			JSR	PRMOVE
			LDX	MOVE
			RTS
			.PAGE

			*=*-1/256+1*256		;GO ON TO NEXT PAGE BOUNDARY
		MESSAG
		PRMSG	.BYTE	"ENTER PRFLG?",0
		PRDMSG	.BYTE	"ENTER PRDEP?",0
		GAMOVR	.BYTE	"GAME OVER",0
		BLKMSG	.BYTE	"COMPUTER IS DARK",0
		WHMSG	.BYTE	"COMPUTER IS WHITE",0
		B112	.BYTE	"DARK STARTS ON 1-12",0
		W112	.BYTE	"WHITE STARTS ON 1-12",0
		TOPLFT	.BYTE	"TOP LEFT SQUARE IS ",0
			.PAGE
		JLERR	.BYTE	"JOYLP ERR0R",0
		QDEPTH	.BYTE	"DEPTH=",0
		QINDEX	.BYTE	"INDEX=",0
		QALPHA	.BYTE	"ALPHA(DEPTH)=",0
		QBETA	.BYTE	"ALPHA(DEPTH-1)=",0
		QALP1	.BYTE	"ALPHA(DEPTH+1)=",0
		QHPIECE	.BYTE	"HPTECE=",0
		GCPIECE	.BYTE	"CPIECE=",0
		GACTIVE	.BYTE	"ACTIVE=",0
			.PAGE

			*=*-1/256+1*256
		MJ	.BYTE	"MULTIPLE JUMP ",0
		MJBA	.BYTE	"FRSMOV & BETTER ALPHA",0
		WA	.BYTE	"WORSE ALPHA",0
		PRUNE	.BYTE	"PRUNE",0
		BANFM	.BYTE	"BETTER ALPHA NOT FRSMOV",0
		BAFM	.BYTE	"BETTER ALPHA FRSMOV",0
			.PAGE
		GAMMSG	.BYTE	"GAME NUMBER=",0
		RAN	.BYTE	"RANDOM ",0


			*=*“1/256+1*256
		;
		; PRINTING VARS FOR DEBUG
		;
		PRCNT
			#=*+1		;COUNT OF NUMBER OF MOVES PRINTED ON A LINE
		PRFLG
			#=*+i		;PRINTING FLAG
		PRDEP
			*=*+1		;MAX DEPTH TO BE PRINTED+1
			.ENDIF
			.END
	;SYMBOL TABLE
AB10	F4F6	AB20	F4FE	AB30	F500	AB50	F2CD
ABD2	F50A	ABDONE	F515	ABRET1	F51E	ABRET2	F3C4
ACTIVE	00BB	ADD10	FE2B	ADDSUM	FE1A	ADDTAB	FFC8
ADDTRM	0020	ADS10	FD19	AJ05	F333	AJ10	FE57
AJ15	FE69	AJUMP	F328	ALJ	F4ET	ALOOP1	F2D7
ALP200	FBE5	ALP205	FBFC	ALP210	FCOB	ALP220	FC0D
ALP230	FC11	ALP231	FC12	ALP235	FC13	ALP240	FC1D
ALPEND	OOF8	ALPH05	F2E2	ALPH10	F2E7	ALPHAH	00EB
ALPHAL	00DE	ALPHBE	F2BC	ALPJMP	F376	ANYMVE	00B6
ARTN	FA8C	ATIM	00EE	ATTR10	F7D6	ATTR20	F7E1
ATTR30	F7EF	ATTR35	F7F4	AUDC0	0015	AUDC1	0016
AUDF0	0017	AUDF1	0018	AUDV0	0019	AUDV1	001A
BACK10	FD45	BACK20	FD79	BACK25	FD16	BACK30	FD2A
BACK40	FD30	BACK50	FD36	BACK60	FD3C	BACK70	FD58
BACK80	FD60	BACK90	FD68	BACK95	FD70	BAKTAB	FF52
BLANK	00AA	BLKJMP	F1CD	BLNKTM	00F0	BNEO	F6D7
BOARD	0080	BRDCHR	FF00	BRDLP	F994	BSWLP	F19F
CENT50	FDDD	CENT90	FDE3	CHECKE	0010	CHGCNT	FE51
CKING	OOAF	CKTAB	FF45	CLPO	0000	CLP1	0080
CLRLP	F974	CMPCHK	0090	CMPCRS	OOBO	CMPKNG	00A0
CMPMVE	F243	COL0	00D0	COL1	00D2	COL2	00D4
COL3	00D6	COLCMP	00B2	COLHUM	00B1	COLP0	00CE
C0LP1	00CF	COLSQ	00F3	COLTB	FFCB	COLUBK	0009
COLUP0	0006	COLUP1	0007	COLUPF	0008	COMP0S	F213
COMP06	F238	COMP07	F23C	COMP10	F240	COMPU2	F2BC
COMPUT	F28D	CONT1	F4D0	CONT2	F4D2	CONT2J	F330
CONT3	F4E4	CONT3J	F2DF	CORN	0004	CORN20	FD91
CORN30	FDA0	CORN40	FDA9	CORN50	FDB4	CORN60	FDBF
CORN70	FDC8	CPIECE	00AA	CRLF	1E2F	CRN100	FDD3
CRSB03	F78E	CRSB10	F793	CRSB13	F7A3	CRSB14	F7B3
CRSB15	F7BB	CRSB17	F7BD	CRSB20	F7D4	CRSBLK	F766
CRSTUP	FAFB	CTAB	FF40	CTLSWA	0281	CTLSWB	0283
CTRLPF	000A	CURS	0030	CURSC	00E8	CURSOR	00AB
CXBLPF	0036	CXCLR	002C	CXM0FB	0034	CXM0P	0030
CXMIFB	0035	CXM1P	0031	CXP0FB	0032	CXP1FB	0033
CXPPMM	0037	DARK	0036	DEN	00B8	DEPTH	00BC
DIAG	FF7E	DIAG1O	FD0B	DIAG20	FD0D	DIAGLP	FCFB
DIS02	FC6C	DIS03	FC6F	DIS04	FC76	DIS05	FC8F
DIS30	FCBC	DIS40	FCD2	DIS50	FCD8	DIS60	FCDF
DIS65	FCE2	DIS67	FCF2	DIS70	FD10	DISLP1	FC78
DISLP2	FCA6	DOCENT	FDD3	DOROT	FB42	DRKCHR	0092
DROP	0036	EDARK	0000	ELIAT	0036	ELIGHT	0034
EMPTY	0000	ENABL	001F	ENAM0	001D	ENAM1	001E
ENDPC	0008	ERRSND	000F	FH20	F4E5	FH21	F4CB
FH5	F465	FH6	F498	FH7	F49B	FHBLEC	F4BF
FHQ	F4B7	FINSH3	F44A	FRAM10	F14E	FRAME	00C3
FRAMLP	F125	FRAG	F47C	FREEZE	00F2	FRM10	F71F
FRM15	F751	FRM20	F75B	FRM30	F762	FRMLP2	F140
FROM	00F4	FROM10	F63D	FROMB	00AC	FROMT	00CB
FROMTO	00E7	FRSMOV	00BF	FRSTAB	FF6E	FRZTIM	002D
FSET20	FB07	FSET30	FB0D	GAMNO	00B0	GETBYT	1F9D
GETCH	1E5A	GFLG2	00EF	GRP0	001B	GRP1	001C
GRTN2	F96C	GS1	F96D	GSCON	002D	GSKIP	F968
GSRST	F944	GSTIM	00EB	HDARK	00B0	HIDIGT	F82E
HKING	00AE	HKTAB	FF43	HLIAT	0026	HLIGHT	0026
HMBL	0024	HMCLR	002B	HMIN	0005	HMM0	0022
HMM1	0023	HMOVE	002A	HMP0	0020	HMP1	0021
HFIECE	00A9	HTAB	FF3E	HUMCHK	0010	HUMCRS	0030
HUMKNG	0020	IED02	FA98	IED04	FA9A	IDE05	FAAB
IED07	FAAF	IED10	FAB6	IED20	FAC5	IEDLP1	FABA
IEDLP2	FAC3	IEDSP	FA8D	ILEGAL	00ED	INDEX	00BE
INLP	F105	INPT0	0038	INPT1	0039	INPT2	003A
INPT3	003B	INPT4	003C	INPT5	003D	INTIM	0284
JMP02	FA51	JMO05	FA55	JMP10	FA6A	JMP12	FA79
JMPBAK	F000	JMPCHK	F9FE	JMPCK2	FA06	JMPEND	00CE
JMPF2	FA1F	JMPI	00A4	JMPLEN	0009	JMPLP1	FA10
JMPLP2	FA3E	JMPLST	00C5	JMPRTN	F9FD	JMPS10	F9DE
JMPS20	F9E2	JMPSAV	FE9F	JMPSET	F9CE	JMPSLP	F9D2
JMPSQR	00BD	JMPSR	F9E7	JMPSV2	FE6A	JMPWIN	F9EB
JOY10	F5EA	JOY11	F5FC	JOY111	F610	JOY12	F658
JOY13	F65A	JOY20	F667	JOY3	F5B3	JOY81	F6CA
JOY9	F5C5	JOY90	F6CE	JOYLP	F5BD	JOYTAB	FF62
JP	00BB	JPF1	FA19	JPM05	F613	JPM06	F61D
JPM10	F621	JTHRU	F54C	JTHRU2	F56E	JUMP1	FB80
JUMP4	FBB5	JUMPL	FBBB	JUMPR	FBCD	JUMPS	FBA5
K100	F09C	K110	F0A2	K130	F086	KING	0020
KNGCHK	FFDF	KNGCHK2	FEBC	KRN10	F080	KRN15	F086
KRNLP	F072	LB	FFFC	LF	0005	LIGHT	000C
LINCHR	0010	LOADY	FA22	LODRAM	F809	LODY10	FA2C
LOOP1	F06E	LOOP15	F07E	LOOP2	F0BC	LOOP20	F0D0
LP06	F923	LP10	F925	LPGX	FBF7	FPSKIP	F8D6
LPX	F8E8	LTCHR	000C	M28LP	F6FC	MAXMAX	000B
MJ05	F36A	MJ07	F387	MJ08	F38C	MJ15	F39B
MJ20	F3A8	MLT	0008	MLTFLG	00A8	MLTJMP	00A6
MOVCHK	FA2D	MOVCLR	FEE1	MOVE	00E9	MOVE10	F6D4
MOVE12	F6DD	MOVE20	F6E6	MOVE28	F6EC	MOVE29	F6FA
MOVE36	F704	MOVE37	F707	MOVE40	F70C	MOVE50	F711
MOVE60	F731	MOVE70	F749	MOVFLG	00E5	MOVTAB	FF66
MOVVAL	00E4	MSKLST	FF4A	MST	0004	MSTFLG	00A7
MSTJMP	00A5	MV285	FAEA	MV287	FAEC	MVTB2	FF6A
NEW10	F456	NEW40	F491	NEW50	F43B	NK	FB96
NOBL	F1F2	NOCHCK	F5A7	NOCHDO	F624	NOJUMP	F55A
NOK	FB46	NOK10	FB5A	NOR05	F190	NOR06	F19B
NOREV	F1CA	NORLP	F188	NOTON	FAE0	NUM	00B5
NUSIZ0	0004	NUSIZ1	0005	NXTAB	FF4E	OLDINP	00EA
OLDPB6	00EC	OLDPBG	00C2	ONBRD2	FAC9	OTHER	00D3
OUTCH	1EA0	OUTSP	1E9E	OVRCON	0025	OVSLP	F1CF
PAL	0000	PF0	000D	PF1	000E	PF2	000F
PICKUP	0030	PIECE	00A3	PLAY2	0010	PNTR0	00D8
PNTR1	00DA	PNTR2	00DC	PNTR3	00DE	PRNCNT	00C4
PRNJMP	F419	PRNT	0000	PRTBYT	1E3B	PSTART	F100
PURE2	0004	GMV10	FE0E	GMV100	FE1A	GMVLP	FE05
GG10	F885	GG20	FBB2	GG30	F8B9	GG40	F8C8
GG50	F90F	RANTAB	FEEA	RB	FFFB	REFP0	000B
REFP1	000C	RES10	F9A5	RES15	F9B7	RES20	F9C9
RESBL	0014	RESET	F982	RESET2	F95E	RESLP	F97D
RESM0	0012	RESM1	0013	RESMP0	0028	RESMP1	0029
RESP0	0010	RESP1	0011	RESTOR	FB62	RESTR4	FB1F
RESTR5	FB3C	RESTR6	FB1B	RF	0004	ROMSTR	F000
ROTIT	F846	RSV	R58A	RSV2	F58D	RSYNC	0003
SAVE1	FEAF	SCOR2	F002	SCOR3	F004	SCOR4	F019
SCP0	00F6	SCP1	00F7	SCRLP0	00D0	SCRLPF	00DA
SCRRP1	00D5	SCRRPF	00DF	SCRTBL	FF8C	SED05	FC54
SED07	FC5F	SED20	FE3A	SED25	FE42	SED30	FE4F
SEDONE	FC3C	SELP	FC2C	SKIP2	F444	SNDTIM	00F1
SOUND0	FFE9	SOUND1	FFEB	SOUND2	FFED	SOUND3	FFEF
SQREND	OOE1	SQUARE	00E0	STACK	0000	STATEV	FC1D
STUP10	F24A	STUP25	F25F	STUP30	F263	STUP35	F270
STUP49	F287	STUP50	F28A	SW10	F175	SWCHA	0280
SWCHB 	0282	SWIT	PF14	SWLP	F16E	SYSTEM	FF75
T0	00B3	T1	00B4	T1024T	0297	T2	OOB5
T3	O0B6	T4	OOCE	T5	00CF	T6	00B7
T7	00B9	T8	OOBA	TER	F31B	TERMNO	FBCE
TERR	FB73	TIM1T	0294	TIM64T	0296	TIM8T	0295
TIMOUT	00C1	T010	F673	TO11	F68B	T050	F6B8
T051	F6BB	T060	FECA	T070	FED6	T080	FEDC
T081	FFE8	TOMOV	FEDE	TONORM	FAF3	TOSET	FAE2
TOSQR	OOF5	TOSQRB	GOAD	TOSUB	FFD1	VBLANK	0001
VBLCON	002C	VBLP	F938	VBTIM	001E	VDELBL	0027
VDELP0	0025	VDELP1	0026	VSYNC	0000	WASJ	F40D
WASJ1O	F421	WASJ17	F441	WASJ18	FE7B	WASJ90	FE93
WASJLP	FE8A	WIN60	F20E	WIN70	F210	WINSAV	00E6
WSLP	F865	WSYNC	0002	XIE1	FA7D	XMOVE	OOCO
XSAVE	00B4	YSAVE	00B5	ZROBGN	0080	ZROEND	OOBO
